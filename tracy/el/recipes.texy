Συνταγές
********


Πολιτική ασφάλειας περιεχομένου .[#toc-content-security-policy]
===============================================================

Εάν ο ιστότοπός σας χρησιμοποιεί Πολιτική ασφάλειας περιεχομένου, θα πρέπει να προσθέσετε `'nonce-<value>'` και το `'strict-dynamic'` στο `script-src` για να λειτουργήσει σωστά το Tracy. Ορισμένα πρόσθετα 3ου τύπου μπορεί να απαιτούν πρόσθετες οδηγίες.
Το Nonce δεν υποστηρίζεται στην οδηγία `style-src`, αν χρησιμοποιείτε αυτή την οδηγία θα πρέπει να προσθέσετε το `'unsafe-inline'`, αλλά αυτό θα πρέπει να αποφεύγεται σε λειτουργία παραγωγής.

Παράδειγμα διαμόρφωσης για το [Nette Framework |nette:configuring]:

```neon
http:
	csp:
		script-src: [nonce, strict-dynamic]
```

PHP:

```php
$nonce = base64_encode(random_bytes(20));
header("Content-Security-Policy: script-src 'nonce-$nonce' 'strict-dynamic';");
```


Πιο γρήγορη φόρτωση .[#toc-faster-loading]
==========================================

Η βασική ενσωμάτωση είναι απλή, ωστόσο αν έχετε αργά σενάρια που μπλοκάρουν την ιστοσελίδα, μπορεί να επιβραδύνουν τη φόρτωση του Tracy.
Η λύση είναι να τοποθετήσετε `<?php Tracy\Debugger::renderLoader() ?>` στο πρότυπό σας πριν από το
οποιαδήποτε σενάρια:

```latte
<!DOCTYPE html>
<html>
<head>
	<title>...<title>
	<?php Tracy\Debugger::renderLoader() ?>
	<link rel="stylesheet" href="assets/style.css">
	<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
</head>
```


AJAX και ανακατευθυνόμενες αιτήσεις .[#toc-ajax-and-redirected-requests]
========================================================================

Το Tracy μπορεί να εμφανίσει τη γραμμή εντοπισμού σφαλμάτων και τα Bluescreens για αιτήσεις AJAX και ανακατευθύνσεις. Το Tracy δημιουργεί τις δικές του συνεδρίες, αποθηκεύει δεδομένα στα δικά του προσωρινά αρχεία και χρησιμοποιεί ένα cookie `tracy-session`.

Το Tracy μπορεί επίσης να ρυθμιστεί ώστε να χρησιμοποιεί μια εγγενή συνεδρία PHP, η οποία ξεκινά πριν από την ενεργοποίηση του Tracy:

```php
session_start();
Debugger::setSessionStorage(new Tracy\NativeSession);
Debugger::enable();
```

Σε περίπτωση που η εκκίνηση μιας συνεδρίας απαιτεί πιο σύνθετη αρχικοποίηση, μπορείτε να εκκινήσετε το Tracy αμέσως (ώστε να μπορεί να χειριστεί τυχόν σφάλματα που θα προκύψουν) και στη συνέχεια να αρχικοποιήσετε τον χειριστή συνεδρίας
και τέλος να ενημερώσετε το Tracy ότι η σύνοδος είναι έτοιμη να χρησιμοποιηθεί χρησιμοποιώντας τη συνάρτηση `dispatch()`:

```php
Debugger::setSessionStorage(new Tracy\NativeSession);
Debugger::enable();

// ακολουθούμενη από αρχικοποίηση συνόδου
// και έναρξη της συνεδρίας
session_start();

Debugger::dispatch();
```

Η συνάρτηση `setSessionStorage()` υπάρχει από την έκδοση 2.9, ενώ πριν από αυτήν το Tracy χρησιμοποιούσε πάντα την εγγενή συνεδρία της PHP.


Προσαρμοσμένος καθαριστής .[#toc-custom-scrubber]
=================================================

Το Scrubber είναι ένα φίλτρο που αποτρέπει τη διαρροή ευαίσθητων δεδομένων από απορρίψεις, όπως κωδικούς πρόσβασης ή διαπιστευτήρια. Το φίλτρο καλείται για κάθε στοιχείο του πίνακα ή του αντικειμένου που απορρίπτεται και επιστρέφει `true` εάν η τιμή είναι ευαίσθητη. Σε αυτή την περίπτωση, αντί της τιμής εκτυπώνεται το `*****`.

```php
// αποφεύγει την απόρριψη τιμών κλειδιών και ιδιοτήτων όπως ο κωδικός πρόσβασης,
// `password_repeat`, `check_password`, `DATABASE_PASSWORD`, κ.λπ.
$scrubber = function(string $key, $value, ?string $class): bool
{
	return preg_match('#password#i', $key) && $value !== null;
};

// το χρησιμοποιούμε για όλες τις απορρίψεις μέσα στο BlueScreen
Tracy\Debugger::getBlueScreen()->scrubber = $scrubber;
```


Προσαρμοσμένος καταγραφέας .[#toc-custom-logger]
================================================

Μπορούμε να δημιουργήσουμε έναν προσαρμοσμένο καταγραφέα για να καταγράφει σφάλματα, μη ληφθείσες εξαιρέσεις και επίσης να καλείται από το `Tracy\Debugger::log()`. Ο καταγραφέας υλοποιεί τη διεπαφή [api:Tracy\ILogger].

```php
use Tracy\ILogger;

class SlackLogger implements ILogger
{
	public function log($value, $priority = ILogger::INFO)
	{
		// στέλνει ένα αίτημα στο Slack
	}
}
```

Και στη συνέχεια τον ενεργοποιούμε:

```php
Tracy\Debugger::setLogger(new SlackLogger);
```

Εάν χρησιμοποιούμε το πλήρες Nette Framework, μπορούμε να το ορίσουμε στο αρχείο ρυθμίσεων NEON:

```neon
services:
	tracy.logger: SlackLogger
```


nginx .[#toc-nginx]
===================

Αν το Tracy δεν λειτουργεί στο nginx, είναι πιθανόν να μην έχει ρυθμιστεί σωστά. Αν υπάρχει κάτι σαν

```nginx
try_files $uri $uri/ /index.php;
```

αλλάξτε το σε

```nginx
try_files $uri $uri/ /index.php$is_args$args;
```
